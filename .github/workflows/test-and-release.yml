name: Test and Release

# Run this job on all pushes and pull requests
# as well as tags with a semantic version
on:
  push:
    branches:
      - "*"
    tags:
      # normal versions
      - "v[0-9]+.[0-9]+.[0-9]+"
      # pre-releases
      - "v[0-9]+.[0-9]+.[0-9]+-**"
  pull_request: {}

jobs:
  lint:
    if: contains(github.event.head_commit.message, '[skip ci]') == false

    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --immutable

    - name: Create a clean build
      run: yarn run build

    - name: Run linters
      run: yarn run lint

  # ===================

  # Runs unit tests on all supported node versions and OSes
  unit-tests:
    if: contains(github.event.head_commit.message, '[skip ci]') == false

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]
        os: [ubuntu-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --immutable

    # Compilation is necessary, or the tests won't run
    - name: Compile TypeScript code
      run: yarn run build

    - name: Run component tests
      # Allow zero tests for now until we have some
      run: yarn run test:ci --passWithNoTests
      env:
        CI: true

  # ===================

  # Deploys the final package to NPM
  deploy:
    # Trigger this step only when a commit on any branch is tagged with a version number
    if: |
      github.actor == 'AlCalzone' &&
      contains(github.event.head_commit.message, '[skip ci]') == false &&
      github.event_name == 'push' &&
      startsWith(github.ref, 'refs/tags/v')

    needs: [lint, unit-tests]

    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'

    - name: Extract the version and commit body from the tag
      id: extract_release
      # The body may be multiline, therefore we need to escape some characters
      run: |
        VERSION="${{ github.ref }}"
        VERSION=${VERSION##*/v}
        echo "::set-output name=VERSION::$VERSION"
        BODY=$(git show -s --format=%b)
        BODY="${BODY//'%'/'%25'}"
        BODY="${BODY//$'\n'/'%0A'}"
        BODY="${BODY//$'\r'/'%0D'}"
        echo "::set-output name=BODY::$BODY"
        if [[ $VERSION == *"-"* ]] ; then
          echo "::set-output name=TAG::--tag next"
        fi

    - name: Install dependencies
      run: yarn install --immutable

    - name: Create a clean build
      run: yarn run build

    - name: Publish packages to npm
      env:
        TAG: ${{ steps.extract_release.outputs.TAG }}
      run: |
        yarn config set npmAuthToken "${{ secrets.NPM_TOKEN }}"
        yarn npm whoami
        yarn workspaces foreach -vti --no-private npm publish --tolerate-republish $TAG

    - name: Create Github Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release v${{ steps.extract_release.outputs.VERSION }}
        draft: false
        # Prerelease versions create prereleases on Github
        prerelease: ${{ contains(steps.extract_release.outputs.VERSION, '-') }}
        body: ${{ steps.extract_release.outputs.BODY }}
